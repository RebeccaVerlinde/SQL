# For this project, I downloaded Spotify data from Kaggle. 
# Them I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL.

# Firstly, I created a table:

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

# Then I inserted the Spotify Data .csv into the table. 

# Next, I explored the data using the following SQL:

SELECT * FROM Spotifydata;

#Lastly, I analysed the data based on the following questions:

1. What is the average danceability by artist and track.
SELECT artist_name, track_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

2. Who are the top 10 artists based on popularity?
SELECT distinct artist_name, popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity DESC
LIMIT 10;

3. What artist released the longest song?
SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC
LIMIT 1;

4. What is the average danceability for the 10 most popular songs?
SELECT  distinct track_name, AVG(danceability)
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity DESC
LIMIT 10;

5. What is the most popular song that has a tempo that is under 130?
SELECT track_name, tempo
FROM BIT_DB.Spotifydata
WHERE tempo <= '130'
ORDER BY popularity DESC
LIMIT 1
